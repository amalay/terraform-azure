trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Define Variables for Environments
variables:
  AzureServiceConnection: AV-Azure-ServiceConnection # Azure Service Connection Name
  ProjectPath: "$(System.DefaultWorkingDirectory)/practical/aks"

  TFStateResourceGroup: "RG-AVE"
  TFStateStorageAccount: ave
  TFStateStorageAccountContainer: terraformstate
  TFStateKey: aks.terraform.tfstate

  DEVEnv: dev
  UATEnv: uat

  SSHKeyFileName: "av-tf-aks-ssh-key.pub"


# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)
stages:
- stage: Build
  jobs:
    - job: Build_Publish_Validate
      continueOnError: false

      steps:
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'

      - task: TerraformCLI@0
        displayName: 'Check Terraform Version'
        inputs:
          command: version

      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(ProjectPath)'
          artifact: 'terraform'
          publishLocation: 'pipeline'      

      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(ProjectPath)'
          backendType: 'azurerm'
          backendServiceArm: '$(AzureServiceConnection)'
          backendAzureRmResourceGroupName: '$(TFStateResourceGroup)'
          backendAzureRmStorageAccountName: '$(TFStateStorageAccount)'
          backendAzureRmContainerName: '$(TFStateStorageAccountContainer)'
          backendAzureRmKey: 'aks.terraform.tfstate'
          allowTelemetryCollection: false

      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(ProjectPath)'
          allowTelemetryCollection: false


# Stage-2: Deploy Stages for Dev Environment
# Deployment-1: Deploy To AKS Dev Cluster
## Step-1: Define Variables for environments
## Step-2: Download SSH Secure File
## Step-3: Terraform Initialize (State Storage to store in Azure Storage Account for AKS Dev Cluster)
## Step-4: Terraform Plan (Create Plan)
## Step-5: Terraform Apply (Use the plan created in previous step)
- stage: Deploy
  jobs:
    - deployment: DEV
      displayName: Deploy To AKS DEV Cluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEVEnv)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: DownloadSecureFile@1
              displayName: Download SSH Key
              name: sshkey
              inputs:
                secureFile: '$(SSHKeyFileName)'

            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform'
                backendType: 'azurerm'
                backendServiceArm: '$(AzureServiceConnection)'
                backendAzureRmResourceGroupName: '$(TFStateResourceGroup)'
                backendAzureRmStorageAccountName: '$(TFStateStorageAccount)'
                backendAzureRmContainerName: '$(TFStateStorageAccountContainer)'
                backendAzureRmKey: 'aks.$(DEVEnv).terraform.tfstate'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform'
                environmentServiceName: '$(AzureServiceConnection)'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(DEVEnv) -out $(Pipeline.Workspace)/terraform/$(DEVEnv)-$(Build.BuildId).out'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform'
                environmentServiceName: '$(AzureServiceConnection)'
                commandOptions: '$(Pipeline.Workspace)/terraform/$(DEVEnv)-$(Build.BuildId).out'
                allowTelemetryCollection: false


# Stage-2: Deploy Stages for UAT
# Deployment-2: Deploy To AKS UAT Cluster
## Step-1: Download Secure File
## Step-2: Terraform Initialize (State Storage to store in Azure Storage Account)
## Step-3: Terraform Plan 
## Step-4: Terraform Apply
    - deployment: UAT
      dependsOn: DEV
      displayName: Deploy To AKS UAT Cluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(UATEnv)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: DownloadSecureFile@1
              displayName: Download SSH Key
              name: sshkey
              inputs:
                secureFile: '$(SSHKeyFileName)'

            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform'
                backendType: 'azurerm'
                backendServiceArm: '$(AzureServiceConnection)'
                backendAzureRmResourceGroupName: '$(TFStateResourceGroup)'
                backendAzureRmStorageAccountName: '$(TFStateStorageAccount)'
                backendAzureRmContainerName: '$(TFStateStorageAccountContainer)'
                backendAzureRmKey: 'aks.$(UATEnv).terraform.tfstate'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
                command: 'plan'
                workingDirectory: '$(Pipeline.Workspace)/terraform'
                environmentServiceName: '$(AzureServiceConnection)'
                commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -var environment=$(UATEnv) -out $(Pipeline.Workspace)/terraform/$(UATEnv)-$(Build.BuildId).out'
                allowTelemetryCollection: false

            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform'
                environmentServiceName: '$(AzureServiceConnection)'
                commandOptions: '$(Pipeline.Workspace)/terraform/$(TestEnv)-$(Build.BuildId).out'
                allowTelemetryCollection: false



